package hadoop.ch05.xmq17124080239;



import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class PartEmployee {

    public static class TokenizerMapper
            extends Mapper<Object, Text, IntWritable, Employee>{
        public void map(Object key, Text value, Context context
        ) throws IOException, InterruptedException {
            String data = value.toString();
            String[] words = data.split(",");

            Employee e = new Employee();
            //设置员工属性
            e.setEmpno(Integer.parseInt(words[0]));
            //员工号
            e.setEname(words[1]);
            //职位
            e.setJob(words[2]);
            //老板号（注意：可能没有老板号）
            try {
                e.setMgr(Integer.parseInt(words[3]));
            }catch (Exception ex){
                e.setMgr(-1);
            }
            //入职时间
            e.setHiredate(words[4]);
            //月薪
            e.setSal(Integer.parseInt(words[5]));
            //奖金(注意：奖金可能没有)
            try{
                e.setComm(Integer.parseInt(words[6]));
            }catch (Exception ex){
                //没有奖金
                e.setComm(0);
            }
            //部门号
            e.setDeptno(Integer.parseInt(words[7]));

            context.write(new IntWritable(Integer.parseInt(words[5])),e);

        }
    }




    public static class IntSumReducer
            extends Reducer<IntWritable,Employee,IntWritable,Employee> {
        public void reduce(IntWritable key, Iterable<Employee> values,
                           Context context) throws IOException, InterruptedException {
            for (Employee e : values){
                context.write(key ,e);
            }

        }
    }





    public static class MyEmployeeParitioner extends Partitioner<IntWritable,Employee>{

        public int getPartition(IntWritable k2, Employee v2, int i) {
            if (v2.getSal() < 1500) {
                return 1%i;
            }else if (v2.getSal()>= 3000 ){
                return 3%i;
            }else{
                return 2%i;
            }
        }



    }





    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();

        if (otherArgs.length < 2) {
            System.err.println("Usage: wordcount <in> [<in>...] <out>");
            System.exit(2);
        }
        Job job = new Job(conf, "partemployee");
        job.setJarByClass(PartEmployee.class);
        job.setMapperClass(TokenizerMapper.class);

        job.setMapOutputKeyClass(IntWritable.class);
        job.setMapOutputValueClass(Employee.class);

        job.setPartitionerClass(MyEmployeeParitioner.class);
        job.setNumReduceTasks(3);

        job.setCombinerClass(IntSumReducer.class);
        job.setReducerClass(IntSumReducer.class);



        job.setOutputKeyClass(IntWritable.class);
        job.setOutputValueClass(Employee.class);






        for (int i = 0; i < otherArgs.length - 1; ++i) {
            FileInputFormat.addInputPath(job, new Path(otherArgs[i]));
        }
        FileOutputFormat.setOutputPath(job,
                new Path(otherArgs[otherArgs.length - 1]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

-------------------------------------------------------------------
package hadoop.ch05.xmq17124080239;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import org.apache.hadoop.io.Writable;

public class Employee implements Writable {

    private int empno ;
    private String ename ;
    private String job ;
    private int mgr ;
    private String hiredate ;
    private int sal ;
    private int comm ;
    private int deptno ;


    @Override
    //方序列化
    public void readFields(DataInput input) throws IOException {
        this.empno=input.readInt();
        this.ename=input.readUTF();
        this.job=input.readUTF();
        this.mgr=input.readInt();
        this.hiredate=input.readUTF();
        this.sal=input.readInt();
        this.comm=input.readInt();
        this.deptno=input.readInt();


    }

    @Override
    //序列化
    public void write(DataOutput output) throws IOException {
        output.writeInt(this.empno);
        output.writeUTF(this.ename);
        output.writeUTF(this.job);
        output.writeInt(this.mgr);
        output.writeUTF(this.hiredate);
        output.writeInt(this.sal);
        output.writeInt(this.comm);
        output.writeInt(this.deptno);
    }
    public int getEmpno(){
        return empno;
    }
    public void setEmpno(int empno){
        this.empno = empno;
    }

    public String getEname(){
        return ename;
    }
    public void setEname(String ename){
        this.ename = ename;
    }

    public String getJob(){
        return job;
    }
    public void setJob(String job){
        this.job = job;
    }

    public int getMgr(){
        return mgr;
    }
    public void setMgr(int mgr){
        this.mgr = mgr;
    }

    public String getHiredate(){
        return hiredate;
    }
    public void setHiredate(String hiredate){
        this.hiredate = hiredate;
    }

    public int getSal(){
        return sal;
    }
    public void setSal(int sal){
        this.sal = sal;
    }

    public int getComm(){
        return comm;
    }
    public void setComm(int comm){
        this.comm = comm;
    }

    public int getDeptno(){
        return deptno;
    }
    public void setDeptno(int deptno){
        this.deptno = deptno;
    }

    @Override
    public String toString() {
        return empno +","+ ename +","+ job +","+mgr +","+ hiredate +","+ comm +","+ deptno ;
    }
}
